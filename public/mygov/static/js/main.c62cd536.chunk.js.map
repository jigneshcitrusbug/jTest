{"version":3,"sources":["features/counter/counterSlice.js","App.js","reducers/main.js","reducers/livestock.js","reducers/horseTravel.js","reducers/rootReducer.js","services/Redux.js","serviceWorker.js","index.js","actions/actionTypes.js"],"names":["counterSlice","createSlice","name","initialState","value","reducers","increment","state","decrement","incrementByAmount","action","payload","actions","incrementAsync","amount","dispatch","setTimeout","selectCount","counter","Counter","lazy","Print","CameraTestPage","GalleryPage","SketchPage","BluetoothPage","Calculator","Main","LiveStock","LiveStockPrint","HorsePermanentTravelPermit","HorsePermanentTravelPrint","PreSaleHorsePermanentTravelPermit","PreSalePrint","Dashboard","InspectionList","App","className","data-testid","fallback","exact","path","component","TestValue","main","type","types","currentStep","liveStockStep1","id","owner","buyer","liveStockStep2","inspectedFor","addAnimalRow","isFirstCall","livestock","data","rootReducer","combineReducers","horseTravel","counterReducer","store","applyMiddleware","logger","createStore","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","SET_MAIN","SET_STEPS","SET_LIVE_STOCK_STEP_1","SET_LIVE_STOCK_STEP_2","SET_FLAG_UPDATE","POST_HORSE_PERMANENT_TRAVEL_PERMIT"],"mappings":"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","file":"static/js/main.c62cd536.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const counterSlice = createSlice({\r\n    name: 'counter',\r\n    initialState: {\r\n        value: 0,\r\n    },\r\n    reducers: {\r\n        increment: state => {\r\n            // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n            // doesn't actually mutate the state because it uses the Immer library,\r\n            // which detects changes to a \"draft state\" and produces a brand new\r\n            // immutable state based off those changes\r\n            state.value += 1;\r\n        },\r\n        decrement: state => {\r\n            state.value -= 1;\r\n        },\r\n        incrementByAmount: (state, action) => {\r\n            state.value += action.payload;\r\n        },\r\n    },\r\n});\r\n\r\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\r\n\r\n// The function below is called a thunk and allows us to perform async logic. It\r\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\r\n// will call the thunk with the `dispatch` function as the first argument. Async\r\n// code can then be executed and other actions can be dispatched\r\nexport const incrementAsync = amount => dispatch => {\r\n    setTimeout(() => {\r\n        dispatch(incrementByAmount(amount));\r\n    }, 1000);\r\n};\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\r\nexport const selectCount = state => state.counter.value;\r\n\r\nexport default counterSlice.reducer;\r\n","import React from 'react';\r\nimport { Suspense, lazy } from 'react';\r\nimport {  Route, Switch } from 'react-router-dom';\r\nimport \"./assets/css/style.css\";\r\n\r\nconst Counter = lazy(() => import('./pages/CounterHome'));\r\nconst Print = lazy(() => import('./pages/PrintHome'));\r\nconst CameraTestPage = lazy(() => import('./pages/CameraTestPage'));\r\nconst GalleryPage = lazy(() => import('./pages/GalleryPage'));\r\nconst SketchPage = lazy(() => import('./pages/SketchPage'));\r\nconst BluetoothPage = lazy(() => import('./pages/BluetoothPage'));\r\n// const PriceCalculator = lazy(() => import('./pages/PriceCalc'));\r\nconst Calculator = lazy(() => import('./pages/Calculator'));\r\nconst Main = lazy(() => import('./pages/Main'));\r\nconst LiveStock  = lazy(() => import('./containers/liveStock'));\r\nconst LiveStockPrint = lazy(() => import('./pages/LiveStock/LiveStockPrint'));\r\nconst HorsePermanentTravelPermit  = lazy(() => import('./pages/HorsePermanentTravelPermit/HorsePermanentTravelPermit'));\r\nconst HorsePermanentTravelPrint = lazy(() => import('./pages/HorsePermanentTravelPermit/HorsePermanentTravelPrint'));\r\nconst PreSaleHorsePermanentTravelPermit = lazy(() => import('./pages/PreSaleHorsePermanentTravelPermit/PreSaleHorsePermanentTravelPermit'));\r\nconst PreSalePrint = lazy(() => import('./pages/PreSaleHorsePermanentTravelPermit/PreSalePrint'));\r\nconst Dashboard = lazy(() => import('./pages/Dashboard'));\r\nconst InspectionList = lazy(() => import('./pages/InspectionList/InspectionList'));\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\" data-testid=\"App\">\r\n      <Switch>\r\n        <Suspense fallback={<div>Loading...</div>}>\r\n          <Route exact path=\"/main\" component={Main} />\r\n          <Route exact path=\"/\" component={Dashboard} />\r\n          <Route exact path =\"/inspection\" component = {InspectionList}/>\r\n          <Route exact path=\"/livestock\" component={LiveStock} />\r\n          <Route exact path=\"/livestock/edit/:id\" component={LiveStock} />\r\n          <Route exact path=\"/horse-permanent-travel-permit\" component={HorsePermanentTravelPermit} />\r\n          <Route exact path=\"/horse-permanent-travel-permit/edit/:id\" component={HorsePermanentTravelPermit} />\r\n          <Route exact path=\"/pre-sale-horse-permanent-travel-permit\" component={PreSaleHorsePermanentTravelPermit} />\r\n          <Route exact path=\"/pre-sale-horse-permanent-travel-permit/edit/:id\" component={PreSaleHorsePermanentTravelPermit} />\r\n\r\n          {/* Print Page */}\r\n          <Route exact path=\"/horse-permanent-travel-permit-print/:id\" component={HorsePermanentTravelPrint} />\r\n          <Route exact path=\"/pre-sale-print/:id\" component={PreSalePrint} />\r\n          <Route exact path=\"/livestock/:id/print/:printType\" component={LiveStockPrint} />\r\n\r\n          \r\n          <Route exact path='/counter' component={Counter} />\r\n          <Route exact path='/print' component={Print} />\r\n          <Route path='/camera' component={CameraTestPage} />\r\n          <Route path='/gallery' component={GalleryPage} />\r\n          <Route path='/sketch' component={SketchPage} />\r\n          <Route path='/bluetooth' component={BluetoothPage} />\r\n          <Route path='/price-calculator' component={Calculator} />\r\n          {/* <Route path='/calc' component={PriceCalculator} /> */}\r\n        </Suspense>\r\n      </Switch>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import * as types from '../actions/actionTypes';\r\n\r\nconst initialState = {\r\n   TestValue : \"Test\"\r\n};\r\n\r\nconst main = (state = initialState, action) => {\r\n    switch (action.type) {\r\n      case types.SET_MAIN:\r\n        return {\r\n          ...state,\r\n          TestValue: action.value,\r\n        };\r\n      default:\r\n        return state;\r\n    }\r\n  };\r\n  \r\n  export default main;\r\n  ","import * as types from '../actions/actionTypes';\r\n\r\nconst initialState = {\r\n    currentStep:1,\r\n    liveStockStep1:{\r\n        id:null,\r\n        owner:{},\r\n        buyer:{}\r\n    },\r\n    liveStockStep2:{\r\n        id:null,\r\n        inspectedFor:[],\r\n        addAnimalRow:[],\r\n    },\r\n    isFirstCall: true,\r\n};\r\n\r\nconst livestock = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case types.SET_LIVE_STOCK_STEP_1:\r\n            return {\r\n                ...state,\r\n                liveStockStep1: action.data,\r\n            }; \r\n        case types.SET_LIVE_STOCK_STEP_2:\r\n            return {\r\n                ...state,\r\n                liveStockStep2: action.data,\r\n            };\r\n        case types.SET_STEPS:\r\n            return {\r\n                ...state,\r\n                currentStep:action.value\r\n            }   \r\n        case types.SET_FLAG_UPDATE:\r\n            return {\r\n                ...state,\r\n                isFirstCall:action.value\r\n            }   \r\n        default:\r\n            return state;\r\n    }\r\n  };\r\n  \r\n  export default livestock;\r\n  ","import * as types from '../actions/actionTypes';\r\n\r\nconst initialState = {\r\n    \r\n};\r\n\r\nconst livestock = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case types.POST_HORSE_PERMANENT_TRAVEL_PERMIT:\r\n            return {\r\n                ...state,\r\n                ...action.data,\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default livestock;","import { combineReducers } from 'redux';\r\nimport counterReducer from '../features/counter/counterSlice';\r\n\r\nimport main from './main';\r\nimport livestock from './livestock';\r\nimport horseTravel from './horseTravel';\r\nconst rootReducer = combineReducers({\r\n    livestock,\r\n    horseTravel,\r\n    main,\r\n    counter: counterReducer,\r\n});\r\n\r\nexport default rootReducer;\r\n","import { createStore, applyMiddleware } from 'redux';\r\nimport logger from 'redux-logger';\r\nimport rootReducer from '../reducers/rootReducer';\r\n\r\nconst middlewares = applyMiddleware(logger);\r\n\r\nexport const store =\r\n  process.env.NODE_ENV === 'development' ? createStore(rootReducer, middlewares) : createStore(rootReducer);\r\n\r\nexport const dispatch = (action) => {\r\n  store.dispatch(action);\r\n};\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n  // [::1] is the IPv6 localhost address.\r\n  window.location.hostname === '[::1]' ||\r\n  // 127.0.0.0/8 are considered localhost for IPv4.\r\n  window.location.hostname.match(\r\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n  )\r\n);\r\n\r\nexport function register(config) {\r\n\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            \r\n           \r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}","import 'react-app-polyfill/stable';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\nimport App from './App';\r\nimport { store } from './services/Redux';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { BrowserRouter as Router } from 'react-router-dom'\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n      <Router>\r\n        <App />\r\n      </Router>\r\n    </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();   //this makes your app PWA","export const SET_MAIN = 'SET_MAIN';\r\n//liveStock\r\nexport const SET_STEPS=\"SET_STEPS\";\r\nexport const SET_LIVE_STOCK_STEP_1 = \"SET_LIVE_STOCK_STEP_1\";\r\nexport const SET_LIVE_STOCK_STEP_2 = \"SET_LIVE_STOCK_STEP_2\";\r\nexport const SET_FLAG_UPDATE = 'SET_FLAG_UPDATE';\r\nexport const POST_HORSE_PERMANENT_TRAVEL_PERMIT = 'POST_HORSE_PERMANENT_TRAVEL_PERMIT';\r\n"],"sourceRoot":""}